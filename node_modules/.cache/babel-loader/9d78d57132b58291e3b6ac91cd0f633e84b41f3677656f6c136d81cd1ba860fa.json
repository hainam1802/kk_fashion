{"ast":null,"code":"/**\n * this is a set which automatically forgets\n * a given entry when a new entry is set and the ttl\n * of the old one is over\n */\nvar ObliviousSet = /** @class */function () {\n  function ObliviousSet(ttl) {\n    this.ttl = ttl;\n    this.set = new Set();\n    this.timeMap = new Map();\n  }\n  ObliviousSet.prototype.has = function (value) {\n    return this.set.has(value);\n  };\n  ObliviousSet.prototype.add = function (value) {\n    var _this = this;\n    this.timeMap.set(value, now());\n    this.set.add(value);\n    /**\n     * When a new value is added,\n     * start the cleanup at the next tick\n     * to not block the cpu for more important stuff\n     * that might happen.\n     */\n    setTimeout(function () {\n      removeTooOldValues(_this);\n    }, 0);\n  };\n  ObliviousSet.prototype.clear = function () {\n    this.set.clear();\n    this.timeMap.clear();\n  };\n  return ObliviousSet;\n}();\nexport { ObliviousSet };\n/**\n * Removes all entries from the set\n * where the TTL has expired\n */\nexport function removeTooOldValues(obliviousSet) {\n  var olderThen = now() - obliviousSet.ttl;\n  var iterator = obliviousSet.set[Symbol.iterator]();\n  /**\n   * Because we can assume the new values are added at the bottom,\n   * we start from the top and stop as soon as we reach a non-too-old value.\n   */\n  while (true) {\n    var value = iterator.next().value;\n    if (!value) {\n      return; // no more elements\n    }\n\n    var time = obliviousSet.timeMap.get(value);\n    if (time < olderThen) {\n      obliviousSet.timeMap.delete(value);\n      obliviousSet.set.delete(value);\n    } else {\n      // We reached a value that is not old enough\n      return;\n    }\n  }\n}\nexport function now() {\n  return new Date().getTime();\n}","map":{"version":3,"names":["ObliviousSet","ttl","set","Set","timeMap","Map","prototype","has","value","add","_this","now","setTimeout","removeTooOldValues","clear","obliviousSet","olderThen","iterator","Symbol","next","time","get","delete","Date","getTime"],"sources":["C:\\xampp\\htdocs\\kk_fashion\\node_modules\\oblivious-set\\src\\index.ts"],"sourcesContent":["\n/**\n * this is a set which automatically forgets\n * a given entry when a new entry is set and the ttl\n * of the old one is over\n */\nexport class ObliviousSet<T = any> {\n    public readonly set = new Set();\n    public readonly timeMap = new Map();\n    constructor(\n        public readonly ttl: number\n    ) { }\n\n    has(value: T): boolean {\n        return this.set.has(value);\n    }\n\n    add(value: T): void {\n        this.timeMap.set(value, now());\n        this.set.add(value);\n\n        /**\n         * When a new value is added,\n         * start the cleanup at the next tick\n         * to not block the cpu for more important stuff\n         * that might happen.\n         */\n        setTimeout(() => {\n            removeTooOldValues(this);\n        }, 0);\n    }\n\n    clear() {\n        this.set.clear();\n        this.timeMap.clear();\n    }\n}\n\n\n/**\n * Removes all entries from the set\n * where the TTL has expired\n */\nexport function removeTooOldValues(\n    obliviousSet: ObliviousSet\n) {\n    const olderThen = now() - obliviousSet.ttl;\n    const iterator = obliviousSet.set[Symbol.iterator]();\n\n    /**\n     * Because we can assume the new values are added at the bottom,\n     * we start from the top and stop as soon as we reach a non-too-old value.\n     */\n    while (true) {\n        const value = iterator.next().value;\n        if (!value) {\n            return; // no more elements\n        }\n        const time = obliviousSet.timeMap.get(value);\n        if (time < olderThen) {\n            obliviousSet.timeMap.delete(value);\n            obliviousSet.set.delete(value);\n        } else {\n            // We reached a value that is not old enough\n            return;\n        }\n    }\n}\n\nexport function now(): number {\n    return new Date().getTime();\n}\n\n\n"],"mappings":"AACA;;;;;AAKA,IAAAA,YAAA;EAGI,SAAAA,aACoBC,GAAW;IAAX,KAAAA,GAAG,GAAHA,GAAG;IAHP,KAAAC,GAAG,GAAG,IAAIC,GAAG,EAAE;IACf,KAAAC,OAAO,GAAG,IAAIC,GAAG,EAAE;EAG/B;EAEJL,YAAA,CAAAM,SAAA,CAAAC,GAAG,GAAH,UAAIC,KAAQ;IACR,OAAO,IAAI,CAACN,GAAG,CAACK,GAAG,CAACC,KAAK,CAAC;EAC9B,CAAC;EAEDR,YAAA,CAAAM,SAAA,CAAAG,GAAG,GAAH,UAAID,KAAQ;IAAZ,IAAAE,KAAA;IACI,IAAI,CAACN,OAAO,CAACF,GAAG,CAACM,KAAK,EAAEG,GAAG,EAAE,CAAC;IAC9B,IAAI,CAACT,GAAG,CAACO,GAAG,CAACD,KAAK,CAAC;IAEnB;;;;;;IAMAI,UAAU,CAAC;MACPC,kBAAkB,CAACH,KAAI,CAAC;IAC5B,CAAC,EAAE,CAAC,CAAC;EACT,CAAC;EAEDV,YAAA,CAAAM,SAAA,CAAAQ,KAAK,GAAL;IACI,IAAI,CAACZ,GAAG,CAACY,KAAK,EAAE;IAChB,IAAI,CAACV,OAAO,CAACU,KAAK,EAAE;EACxB,CAAC;EACL,OAAAd,YAAC;AAAD,CAAC,EA9BD;;AAiCA;;;;AAIA,OAAM,SAAUa,kBAAkBA,CAC9BE,YAA0B;EAE1B,IAAMC,SAAS,GAAGL,GAAG,EAAE,GAAGI,YAAY,CAACd,GAAG;EAC1C,IAAMgB,QAAQ,GAAGF,YAAY,CAACb,GAAG,CAACgB,MAAM,CAACD,QAAQ,CAAC,EAAE;EAEpD;;;;EAIA,OAAO,IAAI,EAAE;IACT,IAAMT,KAAK,GAAGS,QAAQ,CAACE,IAAI,EAAE,CAACX,KAAK;IACnC,IAAI,CAACA,KAAK,EAAE;MACR,OAAO,CAAC;;;IAEZ,IAAMY,IAAI,GAAGL,YAAY,CAACX,OAAO,CAACiB,GAAG,CAACb,KAAK,CAAC;IAC5C,IAAIY,IAAI,GAAGJ,SAAS,EAAE;MAClBD,YAAY,CAACX,OAAO,CAACkB,MAAM,CAACd,KAAK,CAAC;MAClCO,YAAY,CAACb,GAAG,CAACoB,MAAM,CAACd,KAAK,CAAC;KACjC,MAAM;MACH;MACA;;;AAGZ;AAEA,OAAM,SAAUG,GAAGA,CAAA;EACf,OAAO,IAAIY,IAAI,EAAE,CAACC,OAAO,EAAE;AAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}